local repo = 'https://raw.githubusercontent.com/Cold-Script/Linoria/refs/heads/main/LinoriaLib/'

local Library = loadstring(game:HttpGet(repo .. 'Library_Loader.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Window = Library:CreateWindow({
    Title = ' [ ALPHA ] DOORS | YOUHUB V5',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})
local Tab = {
  Main = Window:AddTab("Main", "rbxassetid://4335489011"),
  Exploits = Window:AddTab("Exploits", "rbxassetid://4335489011"),
  ESP = Window:AddTab("ESP", "rbxassetid://4335489011"),
  Visual = Window:AddTab("Visual", "rbxassetid://4335489011"),
  Miscellaneous = Window:AddTab("Miscellaneous", "rbxassetid://4335489011"),
  Configs = Window:AddTab("Configs", "rbxassetid://4335489011")
}

local Flags = {
  ReviveOnDeath = false,
  ReplayOnDeath = false,
  LobbyOnDeath = false,
  InstanceInteract = false,
  CrossInteraction = false,
  RemoteInteraction = false,
  RangeMultiplier = 1,
  AutoPadlockUnlock = false,
  EntityNotifying = false,
  NotifyingEntityChat = false,
  TimeNotifying = 3,
  AntiSnare = false,
  AntiDupe = false,
  AntiVacuum = false,
  AntiChandelier = false,
  AntiSeekArms = false,
  AntiEyes = false,
  AntiLookman = false,
  AntiBanana = false,
  AntiJeffTheKiller = false,
  VelocityLimit = false,
  VelocityLimitSet = 0,
  SpamOtherItems = false,
  Stunned = false,
  LagBody = false,
  SpamMotorReplicated = false,
  DisabledScreech = false,
  DisabledA90 = false,
  DisabledHalt = false,
  DisabledSeekTrigger = false,
  BypassTime = 0.2,
  SpeedBypass = false,
  LadderBypass = false
}
local LeftMainI = Tab.Main:AddLeftGroupbox("Automation")

LeftMainI:AddToggle("MyToggle",{
Text = "Revive On Death",
Default = Flags.ReviveOnDeath,
Callback = function(v)
_G.ReviveOnDeath = v
game:GetService("RunService").RenderStepped:Connect(function()
if game.Players.LocalPlayer.Character.Humanoid.Health == 0 and _G.ReviveOnDeath then
game:GetService("ReplicatedStorage").EntityInfo.Revive:FireServer()
end
end)
end})
LeftMainI:AddToggle("MyToggle",{
Text = "Replay On Death",
Default = Flags.ReplayOnDeath,
Callback = function(v)
_G.ReplayOnDeath = v
game:GetService("RunService").RenderStepped:Connect(function()
wait(5)
if game.Players.LocalPlayer.Character.Humanoid.Health == 0 and _G.ReplayOnDeath then
wait(5)
game:GetService("ReplicatedStorage").EntityInfo.PlayAgain:FireServer()
end
end)
end})
LeftMainI:AddToggle("MyToggle",{
Text = "Lobby On Death",
Default = Flags.ReplayOnDeath,
Callback = function(v)
_G.LobbyOnDeath = v
game:GetService("RunService").RenderStepped:Connect(function()
if game.Players.LocalPlayer.Character.Humanoid.Health == 0 and _G.LobbyOnDeath then
game:GetService("ReplicatedStorage").EntityInfo.Lobby:FireServer()
end
end)
end})
LeftMainI:AddDivider()
LeftMainI:AddToggle("MyToggle",{
Text = "Instance Interact",
Default = Flags.InstanceInteract,
Callback = function(v)
_G.InstanceInteract = v
game:GetService("Workspace").CurrentRooms.DescendantAdded:Connect(function(v)
if not _G.InstanceInteract then return end
if v:IsA("ProximityPrompt") then
if _G.InstanceInteract then
v.HoldDuration = 0
end
end
end)
end})
LeftMainI:AddToggle("MyToggle",{
Text = "Cross Interaction",
Default = Flags.CrossInteraction,
Callback = function(v)
_G.CrossInteraction = v
game:GetService("Workspace").CurrentRooms.DescendantAdded:Connect(function(v)
if not _G.CrossInteraction then return end
if v:IsA("ProximityPrompt") then
if _G.CrossInteraction then
v.RequiresLineOfSight = false
else
v.RequiresLineOfSight = true
end
end
end)
end})
LeftMainI:AddSlider("MySlider",{
Text = "Range Multiplier",
Default = Flags.RangeMultiplier,
Min = Flags.RangeMultiplier,
Max = 10,Rounding = 1,
Compact = true,
Callback = function(v)
_G.MaxMultiplier = v
end})

LeftMainI:AddToggle("MyToggle",{
Text = "Remote Interaction",
Default = Flags.RemoteInteraction,
Callback = function(v)
_G.Reach = v
game:GetService("Workspace").CurrentRooms.DescendantAdded:Connect(function(v)
if not _G.Reach then return end
if v:IsA("ProximityPrompt") then
if _G.Reach then
v.MaxActivationDistance = _G.MaxMultiplier or 1
else
v.MaxActivationDistance = Flags.RangeMultiplier
end
end
end)
end})

LeftMainI:AddDivider()
LeftMainI:AddToggle("MyToggle",{
Text = "Auto Padlock Unlock [50]",
Default = Flags.AutoPadlockUnlock,
Callback = function(v)
local EntityInfo = game:GetService("ReplicatedStorage").EntityInfo
local Floor = game:GetService("ReplicatedStorage").GameData.Floor
local Paper = workspace:FindFirstChild("LibraryHintPaper",true) or workspace:FindFirstChild("LibraryHintPaperHard",true) or Players:FindFirstChild("LibraryHintPaper",true) or Players:FindFirstChild("LibraryHintPaperHard",true)
if not Paper then
Library:Notify("Someone needs to have the Hint Paper to use this.")
return
end
local HintsNeeded = Floor.Value == "Fools" and 8 or 3
local Hints = 0
for _,Collected in pairs(game.Players.LocalPlayer.PlayerGui.PermUI.Hints:GetChildren()) do
if Collected.Name == "Icon" then
   if Collected:IsA("ImageLabel") then
      for _,Icon in pairs(Paper.UI:GetChildren()) do
          if tonumber(Icon.Name) then
             if Icon.ImageRectOffset == Collected.ImageRectOffset then
                Hints += 1
                end
               end
              end
             end
            end
           end
        if Hints < HintsNeeded then
            Library:Notify("You need to collect at least " .. HintsNeeded - Hints .. " more correct hint" .. (Hints ~= 2 and "s" or "") .. " to use this.")
            return
        end
        local t = {}
        for i = 1, Floor.Value == "Hotel" and 5 or 10 do
            local Icon = Paper.UI[i]
            local Number = -1
            for _,Collected in pairs(game.Players.LocalPlayer.PlayerGui.PermUI.Hints:GetChildren()) do
                if Collected.Name == "Icon" then
                    if Collected.ImageRectOffset == Icon.ImageRectOffset then
                        Number = tonumber(Collected.TextLabel.Text)
                    end
                end
            end
            table.insert(t,Number)
        end
        for one=0,t[1]==-1 and 9 or 0 do
            for two=0,t[2]==-1 and 9 or 0 do
                for three=0,t[3]==-1 and 9 or 0 do
                    for four=0,t[4]==-1 and 9 or 0 do
                        for five=0,t[5]==-1 and 9 or 0 do
                            if Floor.Value == "Fools" then
                                for six=0,t[6]==-1 and 9 or 0 do
                                    for seven=0,t[7]==-1 and 9 or 0 do
                                        for eight=0,t[8]==-1 and 9 or 0 do
                                            for nine=0,t[9]==-1 and 9 or 0 do
                                                for ten=0,t[10]==-1 and 9 or 0 do
                                                    EntityInfo.PL:FireServer((t[1]==-1 and one or t[1])..(t[2]==-1 and two or t[2])..(t[3]==-1 and three or t[3])..(t[4]==-1 and four or t[4])..(t[5]==-1 and five or t[5])..(t[6]==-1 and six or t[6])..(t[7]==-1 and seven or t[7])..(t[8]==-1 and eight or t[8])..(t[9]==-1 and nine or t[9])..(t[10]==-1 and ten or t[10]))
                                                end
                                            end
                                        end
                                    end
                                end
                            else
                                EntityInfo.PL:FireServer((t[1]==-1 and one or t[1])..(t[2]==-1 and two or t[2])..(t[3]==-1 and three or t[3])..(t[4]==-1 and four or t[4])..(t[5]==-1 and five or t[5]))
                            end
                        end
                    end
                end
           end
      end
end})
function Notifying(text, time, sound)
Library:Notify(text, time, sound)
end
_G.TimeNotifying = 1
local RightMainI = Tab.Main:AddRightGroupbox("Notifying")
RightMainI:AddToggle("MyToggle",{
Text = "Entity Notifying",
Default = Flags.EntityNotifying,
Callback = function(v)
_G.EntityNotifying = v
if _G.EntityNotifying then
EntityNotifying = workspace.ChildAdded:Connect(function(child)
if child.Name == "RushMoving" and (game.Players.LocalPlayer.Character.HumanoidRootPart:DistanceFromCharacter(child:GetPivot().Position) <1000) then
Notifying("Rush has spawn, hide now", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Rush has spawn, hide")
end
elseif child.Name == "AmbushMoving" and (game.Players.LocalPlayer.Character.HumanoidRootPart:DistanceFromCharacter(child:GetPivot().Position)<1000) then
Notifying("Ambush has spawn, hide now", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Ambush has spawn, hide")
end
elseif child.Name == "GloomPile" then
Notifying("Gloom Pile has spawn in next door, now off the light or lighter of you", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Gloom Pile has spawn in next door, now off the light or lighter of you")
end
elseif child.Name == "BackdoorLookman" then
Notifying("Lookman has spawn, dont look at it", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Lookman has spawn, dont look at it")
end
elseif child.Name == "Eyes" then
Notifying("Eyes has spawn, dont look at it", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Eyes has spawn, dont look at it")
end
elseif child.Name == "JeffTheKiller" then
Notifying("Jeff has spawn in next door, careful with it", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Jeff The Killer, careful it")
end
elseif child.Name == "BackdoorRush" then
Notifying("Blitz has spawn, hide now", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Blitz has spawn, hide")
end
elseif child.Name == "SeekMoving" then
Notifying("Seek chase goodluck", _G.TimeNotifying, 4590657391)
elseif child.Name == "SeekNewCloneMoving" then
Notifying("Seek chase goodluck", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Seek chase, concentrate as much as possible")
end
elseif child.Name == "A60" then
Notifying("A60 has spawn, hide now", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("A60 has spawn, hide")
end
elseif child.Name == "A120" then
Notifying("A120 has spawn, hide now", _G.TimeNotifying, 4590657391)
if _G.NotifyingEntityChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("A120 has spawn, hide")
end
end
end)
else
EntityNotifying:Disconnect()
end
end})
RightMainI:AddDivider()
RightMainI:AddSlider("MySlider",{
Text = "Time Notifying",
Default = Flags.TimeNotifying,
Min = Flags.TimeNotifying,
Max = 5,Rounding = 1,
Compact = true,
Callback = function(v)
_G.TimeNotifying = v
end})

RightMainI:AddToggle("MyToggle",{
Text = "Entity Notifying Chat",
Default = Flags.NotifyingEntityChat,
Callback = function(v)
_G.NotifyingEntityChat = v
end})
local LeftExploitsI = Tab.Exploits:AddLeftGroupbox("Self")
game:GetService("Workspace").CurrentRooms.DescendantAdded:Connect(function(v)
if not _G.AntiSnare then return end
if v.Name == "Snare" then
if _G.AntiSnare then
v.Hitbox.CanTouch = false
end
end
end)
LeftExploitsI:AddToggle("MyToggle",{
Text = "Anti-Snare",
Default = Flags.AntiSnare,
Callback = function(v)
_G.AntiSnare = v
end})
game:GetService("Workspace").CurrentRooms.DescendantAdded:Connect(function(v)
if not _G.AntiDupe then return end
if _G.AntiDupe then
if v.Name == "DoorFake" then
v:WaitForChild("Hidden").CanTouch = false
if v:FindFirstChild("LockPart") then
v.LockPart:WaitForChild("UnlockPrompt", 1).Enabled = false
end
end
end
end)
LeftExploitsI:AddToggle("MyToggle",{
Text = "Anti-Dupe",
Default = Flags.AntiDupe,
Callback = function(v)
_G.AntiSnare = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiChandelier then 
if game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):FindFirstChild("ChandelierObstruction") then 
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):GetChildren()) do 
if v.Name == "ChandelierObstruction" then 
v.HurtPart.CanTouch = false
end 
end 
end 
end 
end)
LeftExploitsI:AddToggle("MyToggle",{
Text = "Anti-Chandelier",
Default = Flags.AntiChandelier,
Callback = function(v)
_G.AntiChandelier = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiSeekArms then
if game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):FindFirstChild("Seek_Arm") then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):GetChildren()) do 
if v.Name == "Seek_Arm" then 
v.AnimatorPart.CanTouch = false
end 
end 
end 
end 
end)
LeftExploitsI:AddToggle("MyToggle",{
Text = "Anti-Seek Arms",
Default = Flags.AntiSeekArms,
Callback = function(v)
_G.AntiSeekArms = v
end})
game:GetService("Workspace").DescendantAdded:Connect(function()
if not _G.AntiEyes then return end
if _G.AntiEyes then 
if workspace:FindFirstChild("Eyes") then 
game:GetService("ReplicatedStorage").EntityInfo.MotorReplication:FireServer(0,(_G.AntiEyes and 120) or 0 ,0,false);
end 
end 
end)
LeftExploitsI:AddToggle("MyToggle",{
Text = "Anti-Eyes",
Default = Flags.AntiEyes,
Callback = function(v)
_G.AntiEyes = v
end})
game:GetService("Workspace").CurrentRooms.DescendantAdded:Connect(function()
if _G.AntiLookman then 
if workspace:FindFirstChild("BackdoorLookman") then 
game:GetService("ReplicatedStorage").EntityInfo.MotorReplication:FireServer(0,(_G.AntiLookman and 120) or 0 ,0,false)
end
end
end)
LeftExploitsI:AddToggle("MyToggle",{
Text = "Anti-Lookman",
Default = Flags.AntiLookman,
Callback = function(v)
_G.AntiLookman = v
end})
game:GetService("Workspace").DescendantAdded:Connect(function(v)
if not _G.AntiBanana then return end
if v:IsA("Part") then
if _G.AntiBanana then
if v.Name == "BananaPeel" then
v.CanTouch = false
v.CanCollide = false
end
end
end
end)
LeftExploitsI:AddToggle("MyToggle",{
Text = "Anti-Banana",
Default = false,
Callback = function(v)
_G.AntiBanana = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
wait(0.5)
if _G.AntiJeff then 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v.Knife.CanTouch = false 
v.Knife.CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v.Head.CanTouch = false 
v.Head.CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v.HumanoidRootPart.CanTouch = false 
v.HumanoidRootPart.CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Left Arm"].CanTouch = false 
v["Left Arm"].CanCollide = false
end 
end
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Left Leg"].CanTouch = false 
v["Left Leg"].CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Right Arm"].CanTouch = false 
v["Right Arm"].CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Right Leg"].CanTouch = false 
v["Right Leg"].CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do
if v.Name == "JeffTheKiller" then 
v.Torso.CanTouch = false 
v.Torso.CanCollide = false
end 
end 
end 
end)
end)
LeftExploitsI:AddToggle("MyToggle",{
Text = "Anti-Jeff",
Default = Flags.AntiJeffTheKiller,
Callback = function(v)
_G.AntiJeff = v
end})
LeftExploitsI:AddDivider()
LeftExploitsI:AddToggle("MyToggle",{
Text = "Velocity Limit",
Default = Flags.VelocityLimit,
Callback = function(v)
_G.VelocityLimit = v
end})
LeftExploitsI:AddSlider("MySlider",{
Text = "Velocity Limit",
Default = Flags.VelocityLimitSet,
Min = Flags.VelocityLimitSet,
Max = 5,Rounding = 1,
Compact = true,
Callback = function(v)
VelocityLimit:Destroy()
_G.VelocityLimitSet = v or 0
if _G.VelocityLimit then
local VelocityLimiter = Instance.new("LinearVelocity", game.Players.LocalPlayer.Character)
VelocityLimiter.Enabled = true
VelocityLimiter.MaxForce = math.huge
VelocityLimiter.VectorVelocity = Vector3.new(_G.VelocityLimitSet, _G.VelocityLimitSet, _G.VelocityLimitSet)
VelocityLimiter.RelativeTo = Enum.ActuatorRelativeTo.World
VelocityLimiter.Attachment0 = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").rootPart:WaitForChild("RootAttachment")
end
end})
local RightExploitsI = Tab.Exploits:AddRightGroupbox("Trolling")
RightExploitsI:AddToggle("MyToggle",{
Text = "Waste Spam Items",
Default = Flags.SpamOtherItems,
Callback = function(v)
_G.WasteItems = v
    while task.wait(0.5) do
        if not _G.WasteItems then
            break
        end
        for _,Player in pairs(game.Players:GetPlayers()) do
            local function WasteItem(Item)
                if Item.Parent ~= Character and Item.Parent.Parent ~= game.Players.LocalPlayer then
                    if ((Item.Name == "Lighter" or Item.Name == "Flashlight") and Item:GetAttribute("Enabled") == false) or Item.Name == "Vitamins" then
                        Item.Remote:FireServer()
                    end
                end
            end
            for _,Item in pairs(Player.Backpack:GetChildren()) do
                WasteItem(Item)
            end
            for _,Item in pairs(Player.Character:GetChildren()) do
                WasteItem(Item)
            end
        end
    end
end})
RightExploitsI:AddToggle("MyToggle",{
Text = "Stunned",
Default = Flags.Stunned,
Callback = function(v)
_G.Stunned = v
while task.wait(0.5) do
if _G.Stunned then
game.Players.LocalPlayer.Character.Humanoid:SetAttribute("Stunned", true)
else
game.Players.LocalPlayer.Character.Humanoid:SetAttribute("Stunned", false)
end
end
end})
RightExploitsI:AddToggle("MyToggle",{
Text = "Lag Move",
Default = Flags.LagBody,
Callback = function(v)
_G.LagBody = v
while task.wait(1.5) do
if _G.LagBody then
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
wait(0.5)
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
end
end
end})
RightExploitsI:AddToggle("MyToggle",{
Text = "Spam Motor Replication",
Default = Flags.SpamMotorReplication,
Callback = function(v)
if v then
SpoofMotor = game:GetService("RunService").Heartbeat:Connect(function()
game:GetService("ReplicatedStorage").EntityInfo.MotorReplication:FireServer(math.random(1,100000),math.random(1,100000),math.random(1,100000),false)
end)
else
SpoofMotor:Disconnect()
end
end})
local RightExploitsII = Tab.Exploits:AddRightGroupbox("Removal")
RightExploitsII:AddToggle("MyToggle",{
Text = "Disable Screech",
Default = Flags.DisabledScreech,
Callback = function(v)
if v then
local Screech = game:GetService("ReplicatedStorage").Entities.Screech:Destroy()
else
Screech:Disconnect()
end
end})
game:GetService("Workspace").DescendantAdded:Connect(function(v)
if not _G.RemoveA90 then return end
if _G.RemoveA90 then
local A90 = game.ReplicatedStorage:WaitForChild("EntityInfo"):WaitForChild("A90")
local A90J = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Jumpscare"):FindFirstChild("Jumpscare_A90")
A90.Parent = nil
A90J.Parent = nil
end
end)
RightExploitsI:AddToggle("MyToggle",{
Text = "Disable A90",
Default = Flags.DisabledA90,
Callback = function(v)
_G.RemoveA90 = v
if _G.RemoveA90 == false then
A90.Parent = game.ReplicatedStorage:WaitForChild("EntityInfo")
A90J.Parent = game.Players.LocalPlayers.PlayerGui.MainUI.Jumpscare
end
end})
game:GetService("Workspace").DescendantAdded:Connect(function(v)
if not _G.RemoveHalt then return end
if _G.RemoveHalt then
game:GetService("ReplicatedStorage").ClientModules.EntityModules.Shade.Parent = game.Workspace
end
end)
RightExploitsI:AddToggle("MyToggle",{
Text = "Disable Halt",
Default = Flags.DisabledHalt,
Callback = function(v)
_G.RemoveHalt = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
if _G.SeekChase then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetDescendants()) do
if v.Name == "TriggerEventCollision" then
v:Destroy()
end
end
end
end)
RightExploitsI:AddToggle("MyToggle",{
Text = "Disable Seek Trigger",
Default = Flags.DisabledSeekTrigger,
Callback = function(v)
_G.SeekChase = v
end})
local RightExploitsIII = Tab.Exploits:AddRightGroupbox("Bypass")
local character = game.Players.LocalPlayer.Character
local humanoid = character:FindFirstChildOfClass("Humanoid")
local speedBoost, speedBoostFinished, speed = 30, false, false
if bypass then
if collisionClone then collisionClone:Destroy() end
speed = true       
local originalSpeed = SpeedBypass
repeat task.wait()
if not SpeedBypass then
SpeedBypass:SetValue(true)
end
until speedBoostFinished
SpeedBypass:SetValue(originalSpeed)
else
if not collisionClone then
collisionClone = character.Collision:Clone() do
collisionClone.CanCollide = false
collisionClone.Massless = true
collisionClone.Name = "CollisionClone"
if collisionClone:FindFirstChild("CollisionCrouch") then
collisionClone.CollisionCrouch:Destroy()
end   
collisionClone.Parent = character    
end
end
task.spawn(function()  
while not speedBoostFinished do
collisionClone.Massless = not collisionClone.Massless
task.wait(_G.Wait or 5)
end           
collisionClone.Massless = true                  
end)
RightExploitsIII:AddSlider("MySlider",{
Text = "Bypass Time Limit",
Default = Flags.BypassTime,
Min = Flags.BypassTime,
Max = 0.25,Rounding = 2,
Compact = true,
Callback = function(v)
_G.Time = v
end})
RightExploitsIII:AddToggle("MyToggle",{
Text = "Speed Bypass",
Default = Flags.SpeedBypass,
Callback = function(v)
if v then
_G.Wait = _G.Time or 0.2
else
_G.Wait = 5
end
end})
RightExploitsIII:AddDivider()
RightExploitsIII:AddToggle("MyToggle",{
Text = "Ladder Bypass",
Default = Flags.LadderBypass,
Callback = function(v)
if v then
local progressPart = Instance.new("Part", Workspace) do
progressPart.Anchored = true
progressPart.CanCollide = false
progressPart.Name = "_internal_mspaint_acbypassprogress"
progressPart.Transparency = 1
Notifying("Climb Ladder to bypass", 5, 4590657391)
end
else
if workspace:FindFirstChild("_internal_mspaint_acbypassprogress") then 
workspace:FindFirstChild("_internal_mspaint_acbypassprogress"):Destroy() 
end
end
end})
